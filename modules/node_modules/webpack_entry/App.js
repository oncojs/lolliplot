import startCase from 'lodash.startcase'
import React, { Component } from 'react'
import { Lolliplot, Backbone, Minimap } from '@oncojs/react-lolliplot'
import groupByType from '@oncojs/react-lolliplot/utils/groupByType'
import * as d3 from 'd3'
import mockData from './data'

class App extends Component {
  state = {
    width: 0,
    data: mockData(100),
    min: 0,
    max: 500,
    blacklist: `impact`,
    consequenceBlacklist: new Set(),
    impactBlacklist: new Set([`HIGH`, `MODERATE`]),
  }
  componentDidMount() {
    this.setState({ width: this.el.clientWidth })
    window.onresize = () => {
      this.setState({ width: this.el.clientWidth })
    }
  }
  update = state => this.setState(state)
  randomize = () => this.setState({ data: mockData(100) })
  reset = () => this.setState({ min: 0, max: 500 })
  toggleBlacklistItem = variant => {
    let blacklist = new Set(this.state[`${this.state.blacklist}Blacklist`])
    if (blacklist.has(variant)) {
      blacklist.delete(variant)
    } else {
      blacklist.add(variant)
    }
    this.setState({ [`${this.state.blacklist}Blacklist`]: blacklist })
  }
  render() {
    let filterByType = type => d => !this.state[`${type}Blacklist`].has(d[type])

    let consequences = groupByType(`consequence`, this.state.data.mutations)

    let colorScale = d3.schemeCategory20
      ? d3.scaleOrdinal(d3.schemeCategory20).domain(d3.range(20))
      : d3.scale.category20().domain(d3.range(20))

    let mutationColors = {
      consequence: Object.keys(consequences).reduce((acc, type, i) => ({
        ...acc,
        [type]: colorScale(i * 3),
      }), {}),
      impact: {
        HIGH: `rgb(221, 60, 60)`,
        MODERATE: `rgb(132, 168, 56)`,
        default: `rgb(135, 145, 150)`,
      },
    }

    return (
      <div>
        <h1>Lolliplot</h1>
        <div style={{ padding: `30px` }}>
          <input
            type="text"
            value={this.state.min}
            onChange={e => this.setState({ min: +e.target.value })}
          />
          <input
            type="text"
            value={this.state.max}
            onChange={e => this.setState({ max: +e.target.value })}
          />
        </div>
        <div style={{ display: `flex`, padding: `30px` }}>
          <div style={{ flex: 1 }} ref={el => this.el = el}>
            {this.state.width &&
              <div>
                <Lolliplot
                  {...this.state}
                  d3={d3}
                  update={this.update}
                  highlightedPointId="MU20"
                  getPointColor={d =>
                    mutationColors[this.state.blacklist][d[this.state.blacklist]]
                  }
                  data={this.state.data.mutations.filter(filterByType(this.state.blacklist))}
                  onPointClick={d => console.log(d)}
                  // onPointMouseover = () => {},
                  // onPointMouseout = () => {},
                />
                <Backbone
                  {...this.state}
                  d3={d3}
                  update={this.update}
                  data={this.state.data.proteins}
                  onProteinClick={d => this.update({ min: d.start, max: d.end })}
                />
                <Minimap
                  {...this.state}
                  d3={d3}
                  update={this.update}
                  data={{
                    ...this.state.data,
                    mutations: this.state.data.mutations.filter(filterByType(this.state.blacklist)),
                  }}
                />
              </div>
            }
          </div>
          <div
            style={{
              marginLeft: `20px`,
              width: `300px`,
            }}
          >
            <div
              style={{
                border: `1px solid rgb(186, 186, 186)`,
                padding: `13px`,
              }}
            >
              <div>
                Viewing {this.state.data.mutations.filter(d =>
                  d.x > this.state.min && d.x < this.state.max
                ).filter(filterByType(this.state.blacklist)).length} /
                &nbsp;{this.state.data.mutations.length} Mutations
              </div>
              <div style={{ marginTop: `6px` }}>
                <select
                  value={this.state.blacklist}
                  onChange={e => this.setState({ blacklist: e.target.value })}
                >
                  <option value="consequence">Consequence</option>
                  <option value="impact">Impact (VEP)</option>
                </select>
              </div>
              <div style={{ marginTop: `6px` }}>
                {Object.entries(groupByType(this.state.blacklist, this.state.data.mutations))
                  .map(([variant, xs]) =>
                    <div
                      key={variant}
                      style={{
                        marginTop: `6px`,
                        fontSize: `14px`,
                      }}
                    >
                      <span
                        onClick={() => this.toggleBlacklistItem(variant)}
                        style={{
                          // color: colors[type] || colors.default},
                          textAlign: `center`,
                          border: `2px solid black`,
                          display: `inline-block`,
                          width: `23px`,
                          cursor: `pointer`,
                          marginRight: `6px`,
                        }}
                      >
                        {this.state[`${this.state.blacklist}Blacklist`].has(variant)
                          ? <span>&nbsp;</span> : `âœ“`
                        }
                      </span>
                      <span>{startCase(variant)}:</span>
                      <span>
                        <b>
                          {xs.filter(d =>
                            d.x > this.state.min && d.x < this.state.max
                          ).filter(filterByType(this.state.blacklist)).length
                          }
                        </b>
                        / <b>{xs.length}</b>
                      </span>
                    </div>
                  )
                }
              </div>
            </div>
          </div>
        </div>
        <div style={{ padding: `30px` }}>
          <button onClick={this.randomize}>Randomize</button>
          <button onClick={this.reset}>Reset</button>
        </div>
      </div>
    )
  }
}

export default App
