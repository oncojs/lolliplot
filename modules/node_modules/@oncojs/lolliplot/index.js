// @flow

import invariant from 'invariant'
import attrs from './attrs'
import { dim, halfPixel } from './spatial'
import setupStore from './store'
import setupFilters from './filters'
import setupMinimap from './minimap'
import setupProteins from './proteins'
import { setupMutations, updateMutations } from './mutations'
import { setupStats, updateStats } from './stats'
import setupTicks from './ticks'
import setupZoomHandlers from './zoom'
import theme from './theme'
import groupByType from './groupByType'
import animator from './animator'
import uuid from './uuid'

/*----------------------------------------------------------------------------*/

type TProteinLolliplotArgs = {
  d3: Object,
  selector: string,
  element: Object,
  data: Object,
  height: number,
  width: number,
  domainWidth: number,
  store?: Object,
  hideStats?: bool,
  statsBoxWidth?: number,
  selectedMutationClass?: string,
  mutationId?: string,
  yAxisOffset?: number,
  xAxisOffset?: number,
  proteinHeight?: number,
  numXTicks?: number,
  numYTicks?: number,
  proteinDb?: string,
  animate?: bool,
  onMutationClick?: Function,
  onMutationMouseover?: Function,
  onMutationMouseout?: Function,
  onProteinMouseover?: Function,
  onProteinMouseout?: Function,
  onInit?: Function,
}
type TProteinLolliplotReturn = {
  reset: Function,
  updateStats: Function,
  draw: Function,
  remove: Function,
  store: Object,
}
type TProteinLolliplot = (args: TProteinLolliplotArgs) => TProteinLolliplotReturn
let proteinLolliplot: TProteinLolliplot = ({
  d3,
  data,
  selector,
  element,
  height,
  width,
  domainWidth = 500,
  hideStats = false,
  statsBoxWidth = hideStats ? 0 : 250,
  selectedMutationClass = `Consequence`,
  mutationId = ``,
  yAxisOffset = 45,
  xAxisOffset = 200,
  store = setupStore({ domainWidth, data }),
  proteinHeight = 40,
  numXTicks = 12,
  numYTicks = 15,
  proteinDb = `pfam`,
  animate = true,
  onMutationClick = () => {},
  onMutationMouseover = () => {},
  onMutationMouseout = () => {},
  onProteinMouseover = () => {},
  onProteinMouseout = () => {},
  onInit = () => {},
} = {}) => {

  invariant(d3, `You must pass in the d3 library, either v3 || v4`)

  d3.selection.prototype.attrs = attrs
  d3.scaleOrdinal = d3.scaleOrdinal || d3.scale.ordinal
  d3.scaleLinear = d3.scaleLinear || d3.scale.linear

  // Similar to a React target element
  let root = element || document.querySelector(selector)

  invariant(root, `Must provide an element or selector!`)

  width = width || root.clientWidth
  height = height || root.clientHeight

  let uniqueSelector = uuid()
  let xAxisLength = width - yAxisOffset - statsBoxWidth
  let scale = xAxisLength / domainWidth

  let consequences = groupByType(`consequence`, data.mutations)
  let impacts = groupByType(`impact`, data.mutations)

  let colorScale = d3.schemeCategory20
    ? d3.scaleOrdinal(d3.schemeCategory20).domain(d3.range(20))
    : d3.scale.category20().domain(d3.range(20))

  let consequenceColors = Object.keys(consequences).reduce((acc, type, i) => ({
    ...acc,
    [type]: colorScale(i * 3),
  }), {})

  let maxDonors = Math.max(...data.mutations.map(x => x.donors))

  let highestValue = Math.max(10, maxDonors)

  let scaleLinearY = d3.scaleLinear()
    .domain([0, highestValue])
    .range([height - xAxisOffset, 15])

  // Main Chart

  let d3Root = d3.select(root).style(`position`, `relative`)

  let svg = d3Root
    .append(`svg`)
    .attrs({
      class: `chart`,
      ...dim(width, height),
    })

  let defs = svg.append(`defs`)

  setupFilters(defs)

  // Chart clipPath

  defs
    .append(`clipPath`)
    .attr(`id`, `${uniqueSelector}-chart-clip`)
    .append(`rect`)
    .attrs({
      x: yAxisOffset,
      y: 0,
      ...dim(xAxisLength, height - xAxisOffset + proteinHeight),
    })

  // Chart zoom area

  let chart = d3Root.select(`.chart`)

  chart
    .append(`rect`)
    .attrs({
      class: `chart-zoom-area`,
      x: yAxisOffset,
      y: halfPixel,
      ...dim(xAxisLength, height - xAxisOffset + proteinHeight - halfPixel),
      fill: `white`,
      stroke: `rgb(181, 181, 181)`,
      'stroke-width': 1,
    })

  // yAxis

  svg
    .append(`g`)
    .append(`line`)
    .attrs({
      class: `yAxis`,
      x1: yAxisOffset,
      y1: 0,
      x2: yAxisOffset,
      y2: height - xAxisOffset + proteinHeight,
      stroke: theme.black,
    })

  // yAxis label

  chart
    .append(`text`)
    .text(`# of Cases`)
    .attrs({
      x: 5,
      y: (height - xAxisOffset) / 2,
      'font-size': `11px`,
      transform: `rotate(270, 10, 124)`,
    })

  // xAxis

  svg
    .append(`g`)
    .append(`line`)
    .attrs({
      class: `xAxis`,
      x1: yAxisOffset,
      y1: height - xAxisOffset,
      x2: width - statsBoxWidth,
      y2: height - xAxisOffset,
      stroke: theme.black,
    })

  // Vertical line on the right of the protein bar

  svg
    .append(`g`)
    .append(`line`)
    .attrs({
      class: `yAxisRight`,
      x1: width - statsBoxWidth,
      y1: height - xAxisOffset,
      x2: width - statsBoxWidth,
      y2: height - xAxisOffset + proteinHeight,
      stroke: theme.black,
    })

  // Horizontal line under protein bar

  svg
    .append(`g`)
    .append(`line`)
    .attrs({
      class: `xAxisBottom`,
      x1: yAxisOffset,
      y1: height - xAxisOffset + proteinHeight + halfPixel,
      x2: width - statsBoxWidth,
      y2: height - xAxisOffset + proteinHeight + halfPixel,
      stroke: theme.black,
    })

  let { minimapZoomArea } = setupMinimap({
    svg,
    width,
    height,
    yAxisOffset,
    xAxisOffset,
    xAxisLength,
    proteinHeight,
    domainWidth,
    statsBoxWidth,
    uniqueSelector,
  })

  chart
    .append(`text`)
    .text(proteinDb)
    .attrs({
      x: 5,
      y: height - xAxisOffset + 25,
      'font-size': `11px`,
    })

  let { mutationChartLines, mutationChartCircles, selectedMutationBox } = setupMutations({
    d3,
    chart,
    consequenceColors,
    scaleLinearY,
    onMutationClick,
    onMutationMouseover,
    onMutationMouseout,
    mutationId,
    data,
    yAxisOffset,
    xAxisOffset,
    height,
    proteinHeight,
    scale,
    maxDonors,
    store,
    uniqueSelector,
  })

  let minimapSlideTarget = svg
    .append(`g`)
    .append(`rect`)
    .attrs({
      class: `minimap-slide-target`,
      x: xAxisLength + yAxisOffset - 20,
      y: height - xAxisOffset + proteinHeight + 25,
      ...dim(15, 15),
      fill: `rgb(255, 255, 255)`,
      stroke: `rgb(57, 57, 57)`,
      cursor: `move`,
    })

  let minimapSlideTargetArrow = svg
    .append(`text`)
    .text(`⟺`)
    .attrs({
      class: `minimap-slide-target-arrow`,
      x: xAxisLength + yAxisOffset - 19,
      y: height - xAxisOffset + proteinHeight + 36,
      'font-size': `11px`,
      'pointer-events': `none`,
    })

  let {
    proteinBars,
    proteinClipPaths,
    proteinNames,
  } = setupProteins({
    d3,
    chart,
    defs,
    onProteinMouseover,
    onProteinMouseout,
    data,
    scale,
    yAxisOffset,
    xAxisOffset,
    proteinHeight,
    height,
    uniqueSelector,
  })

  let { xTicks, yTicks, yTicksLine } = setupTicks({
    d3Root,
    svg,
    numYTicks,
    numXTicks,
    maxDonors,
    scaleLinearY,
    xAxisOffset,
    yAxisOffset,
    domainWidth,
    scale,
    height,
  })

  let {
    stats,
    consequencesCheckboxContainers,
    impactsCheckboxContainers,
    mutationCount,
  } = setupStats({
    d3,
    d3Root,
    consequenceColors,
    data,
    store,
    selector,
    hideStats,
    statsBoxWidth,
    width,
    selectedMutationClass,
    consequences,
    impacts,
    mutationChartLines,
    mutationChartCircles,
    selectedMutationBox,
    height,
    xAxisOffset,
    root,
    yTicks,
    yTicksLine,
  })

  let draw = animator({
    d3,
    d3Root,
    store,
    data,
    yAxisOffset,
    xAxisOffset,
    statsBoxWidth,
    height,
    width,
    domainWidth,
    scale,
    proteinHeight,
    numXTicks,
    mutationChartLines,
    mutationChartCircles,
    selectedMutationBox,
    consequences,
    impacts,
    consequenceColors,
    consequencesCheckboxContainers,
    impactsCheckboxContainers,
    proteinBars,
    proteinClipPaths,
    proteinNames,
    xTicks,
    minimapZoomArea,
    minimapSlideTarget,
    minimapSlideTargetArrow,
    mutationCount,
    yTicks,
    yTicksLine,
    animate,
    hideStats,
  })

  proteinBars
    .on(`click`, d => {
      store.update({
        animating: true,
        targetMin: d.start,
        targetMax: d.end,
      })
      draw()
    })

  let reset = () => {
    store.update({
      animating: animate,
      targetMin: 0,
      targetMax: domainWidth,
      consequenceFilters: [],
      impactFilters: [],
    })

    if (!hideStats) {
      Object.values(consequencesCheckboxContainers).forEach(svg => {
        svg.select(`.toggle-checkbox`)
          .attr(`data-checked`, `true`)
          .html(`✓`)
      })

      updateStats({
        d3,
        d3Root,
        store,
        data,
        consequences,
        impacts,
        consequenceColors,
        height,
        xAxisOffset,
        mutationChartLines,
        mutationChartCircles,
        selectedMutationBox,
        consequencesCheckboxContainers,
        impactsCheckboxContainers,
        mutationCount,
        yTicks,
        yTicksLine,
      })
    }

    updateMutations({ d3Root, checked: true, data, mutationClass: null, type: null })
    draw()
  }

  let { removeZoomHandlers } = setupZoomHandlers({
    d3,
    d3Root,
    root,
    store,
    yAxisOffset,
    xAxisOffset,
    xAxisLength,
    domainWidth,
    scale,
    svg,
    height,
    proteinHeight,
    draw,
    uniqueSelector,
  })

  let remove = () => {
    removeZoomHandlers()
    svg.remove()
    stats.remove()
  }

  let update = props => {
    store.update(props)
    draw()
  }

  draw()
  onInit()

  return {
    reset,
    updateStats,
    draw,
    remove,
    store,
    update,
  }

}

/*----------------------------------------------------------------------------*/

export default proteinLolliplot
export { setupStore }
