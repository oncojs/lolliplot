// @flow

import range from 'lodash.range'
import theme from './theme'

type TSetupTicksArgs = {
  d3Root: Object,
  svg: Object,
  numXTicks: number,
  maxDonors: number,
  scaleLinearY: Function,
  xAxisOffset: number,
  yAxisOffset: number,
  domainWidth: number,
  scale: number,
  height: number,
}
type TSetupTicksReturn = {
  xTicks: Object,
  yTicks: Object,
  yTicksLine: Object,
}
type TSetupTicks = (args: TSetupTicksArgs) => TSetupTicksReturn
let setupTicks: TSetupTicks = ({
  d3Root,
  svg,
  numXTicks,
  maxDonors,
  scaleLinearY,
  xAxisOffset,
  yAxisOffset,
  domainWidth,
  scale,
  height,
}) => {

  // Vertical ticks

  svg.append(`g`).attr(`class`, `yTicks`)

  let highestValue = Math.max(10, maxDonors)

  let yTicks = d3Root.select(`.yTicks`)
    .append(`g`)
    .selectAll(`text`)
    .data(range(1, highestValue, highestValue / 7))
    .enter()
    .append(`text`)
    .text(i => Math.round(i))
    .attrs({
      class: i => `yTick-text-${i}`,
      x: yAxisOffset - 10,
      y: i => scaleLinearY(i) + 3,
      'font-size': `11px`,
      'text-anchor': `end`,
    })

  let yTicksLine = d3Root.select(`.yTicks`)
    .append(`g`)
    .selectAll(`line`)
    .data(range(1, highestValue, highestValue / 7))
    .enter()
    .append(`line`)
    .attrs({
      class: i => `yTick-line-${i}`,
      x1: yAxisOffset - 7,
      y1: i => scaleLinearY(i),
      x2: yAxisOffset,
      y2: i => scaleLinearY(i),
      stroke: theme.black,
    })

  // Horizontal ticks

  svg.append(`g`).attr(`class`, `xTicks`)

  let length = domainWidth / numXTicks
  let xTicks = d3Root.select(`.xTicks`)
    .append(`g`)
    .selectAll(`text`)
    .data(range(numXTicks - 1).map(x => x + 1))
    .enter()
    .append(`text`)
    .text(i => Math.round(length * i))
    .attrs({
      class: i => `xTick-text-${i}`,
      x: i => length * i * scale + yAxisOffset,
      y: height - xAxisOffset + 20,
      'font-size': `11px`,
      'text-anchor': `middle`,
      'pointer-events': `none`,
    })


  for (let i = 1; i < numXTicks; i++) {
    let length = domainWidth / numXTicks

    d3Root.select(`.xTicks`)
      .append(`line`)
      .attrs({
        class: `xTick-line-${i}`,
        x1: length * i * scale + yAxisOffset,
        y1: height - xAxisOffset,
        x2: length * i * scale + yAxisOffset,
        y2: height - xAxisOffset + 10,
        stroke: theme.black,
        'pointer-events': `none`,
      })
  }

  return {
    xTicks,
    yTicks,
    yTicksLine,
  }
}

/*----------------------------------------------------------------------------*/

export default setupTicks
