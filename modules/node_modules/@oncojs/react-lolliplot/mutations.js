// @flow

import { halfPixel } from './spatial'
import theme from './theme'

type TSetupMutationsArgs = {
  d3: Object,
  consequenceColors: Object,
  scaleLinearY: Function,
  onMutationClick: Function,
  onMutationMouseover: ?Function,
  onMutationMouseout: ?Function,
  data: Object,
  yAxisOffset: number,
  xAxisOffset: number,
  height: number,
  proteinHeight: number,
  scale: number,
  maxDonors: number,
  mutationId: string,
  chart: Object,
  uniqueSelector: string,
  animating: boolean,
  min: number,
  max: number,
  width: number,
}
type TSetupMutations = (args: TSetupMutationsArgs) => void
let setupMutations: TSetupMutations = ({
  d3,
  consequenceColors,
  scaleLinearY,
  onMutationClick,
  onMutationMouseover,
  onMutationMouseout,
  data,
  yAxisOffset,
  xAxisOffset,
  height,
  proteinHeight,
  scale,
  mutationId,
  chart,
  uniqueSelector,
  animating,
  min,
  max,
  width,
}) => {
  let scaleLinear = d3.scaleLinear()
    .domain([min, max])
    .range([yAxisOffset, width])

  chart
    .append(`g`)
    .selectAll(`line`)
    .data(data.mutations)
    .enter()
    .append(`line`)
    .attrs({
      class: d => `mutation-line-${d.id}`,
      'clip-path': `url(#${uniqueSelector}-chart-clip)`,
      x1: d => scaleLinear(d.x),
      y1: height - xAxisOffset,
      x2: d => scaleLinear(d.x),
      y2: d => scaleLinearY(d.donors),
      stroke: `rgba(0, 0, 0, 0.2)`,
    })

  chart
    .append(`g`)
    .selectAll(`circle`)
    .data(data.mutations)
    .enter()
    .append(`circle`)
    .attrs({
      class: d => `mutation-circle-${d.id} ${d.id === mutationId ? `selected-mutation` : `` }`,
      'clip-path': `url(#${uniqueSelector}-chart-clip)`,
      cx: d => scaleLinear(d.x),
      cy: d => scaleLinearY(d.donors),
      r: theme.mutationRadius,
      fill: d => consequenceColors[d.consequence],
    })
    .on(`mouseover`, d => {
      if (!animating) {
        if (onMutationMouseover) {
          onMutationMouseover(d, d3.event)
        }
      }
    })
    .on(`mouseout`, d => {
      if (!animating) {
        d3.select(`.tooltip`).style(`left`, `-9999px`)
        if (onMutationMouseout) onMutationMouseout(d, d3.event)
      }
    })
    .on(`click`, d => onMutationClick(d, d3.event))

  let selectedMutation = data.mutations
    .filter(d => d.id === mutationId)
    .map(d => ({ ...d, size: theme.mutationRadius * 3 }))

  chart
    .append(`g`)
    .selectAll(`rect`)
    .data(selectedMutation)
    .enter()
    .append(`rect`)
    .attrs({
      class: `selected-mutation-box`,
      x: d => scaleLinear(d.x) - (d.size / 2),
      y: d => scaleLinearY(d.donors) - (d.size / 2),
      width: d => d.size,
      height: d => d.size,
      fill: `none`,
      stroke: `rgb(251, 94, 45)`,
      'stroke-width': 2,
    })
    .on(`mouseover`, d => {
      if (!animating) {
        if (onMutationMouseover) {
          onMutationMouseover(d, d3.event)
        }
      }
    })
    .on(`mouseout`, d => {
      if (!animating) {
        d3.select(`.tooltip`).style(`left`, `-9999px`)
        if (onMutationMouseout) onMutationMouseout(d, d3.event)
      }
    })
    .on(`click`, d => onMutationClick(d, d3.event))

  data.mutations.forEach(d => {
    // Mutation lines on minimap

    chart
      .append(`line`)
      .attrs({
        class: `mutation-line-${d.id}`,
        x1: (d.x * scale) + yAxisOffset,
        y1: height - xAxisOffset + proteinHeight + 60,
        x2: (d.x * scale) + yAxisOffset + halfPixel,
        y2: Math.max(
          height - xAxisOffset + proteinHeight - (d.donors * 4.5) + 60,
          height - xAxisOffset + proteinHeight + 20,
        ),
        stroke: theme.black,
        'pointer-events': `none`,
      })
  })
}

type TUpdateMutationsArgs = {
  d3Root: Object,
  checked: bool,
  mutationClass: ?string,
  type: ?string,
  data: Object,
}
type TUpdateMutations = (args: TUpdateMutationsArgs) => void
let updateMutations: TUpdateMutations = ({
  d3Root,
  checked,
  mutationClass,
  type,
  data,
}) => {
  let selectedMutations = mutationClass
    ? data.mutations.filter(x => x[mutationClass] === type)
    : data.mutations.slice()

  if (!checked) {
    selectedMutations.forEach(d => {
      d3Root.select(`.mutation-line-${d.id}`).attr(`opacity`, 0)
      d3Root.selectAll(`.mutation-circle-${d.id}`).attr(`opacity`, 0)
    })
  } else {
    selectedMutations.forEach(d => {
      d3Root.select(`.mutation-line-${d.id}`).attr(`opacity`, 1)
      d3Root.selectAll(`.mutation-circle-${d.id}`).attr(`opacity`, 1)
    })
  }
}

export {
  setupMutations,
  updateMutations,
}
