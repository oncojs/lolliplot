// @flow

import { halfPixel } from './spatial'

type TSetupProteinsArgs = {
  d3: Object,
  chart: Object,
  defs: Object,
  onProteinClick: ?Function,
  onProteinMouseover: ?Function,
  onProteinMouseout: ?Function,
  data: Object,
  scale: number,
  yAxisOffset: number,
  xAxisOffset: number,
  proteinHeight: number,
  height: number,
  uniqueSelector: string,
  min: number,
  max: number,
  width: number,
  domainWidth: number,
  proteinMouseover: boolean | string,
}
type TSetupProteins = (args: TSetupProteinsArgs) => void
let setupProteins: TSetupProteins = ({
  d3,
  chart,
  defs,
  onProteinClick,
  onProteinMouseover,
  onProteinMouseout,
  data,
  scale,
  yAxisOffset,
  xAxisOffset,
  proteinHeight,
  height,
  uniqueSelector,
  min,
  max,
  width,
  domainWidth,
  proteinMouseover,
}) => {

  let scaleLinear = d3.scaleLinear()
    .domain([min, max])
    .range([yAxisOffset, width])

  let widthZoomRatio = domainWidth / Math.max((max - min), 0.00001)

  chart
    .append(`g`)
    .selectAll(`rect`)
    .data(data.proteins)
    .enter()
    .append(`rect`)
    .attrs({
      'clip-path': `url(#${uniqueSelector}-chart-clip)`,
      class: d => `range-${d.id}-${d.start}-${d.end}`,
      x: d => Math.max(yAxisOffset, scaleLinear(d.start)) + halfPixel,
      y: height - xAxisOffset + halfPixel,
      width: d => {
        let barWidth = (d.end - Math.max(d.start, min)) * widthZoomRatio * scale
        return Math.max(0, barWidth - 1)
      },
      height: proteinHeight - halfPixel,
      fill: (d, i) => `hsl(
        ${i * 100},
        ${proteinMouseover === d.id ? 85 : 80}%,
        ${proteinMouseover === d.id ? 75 : 90}%)
      `,
      cursor: `pointer`,
    })
    .on(`click`, d => {
      if (onProteinClick) {
        onProteinClick(d)
      }
    })
    .on(`mouseover`, d => {
      if (onProteinMouseover) {
        onProteinMouseover(d, d3.event)
      }
    })
    .on(`mouseout`, d => {
      if (onProteinMouseout) {
        onProteinMouseout(d, d3.event)
      }
    })

  defs
    .append(`g`)
    .attr(`class`, `protein-text-clip-path`)
    .selectAll(`clipPath`)
    .data(data.proteins)
    .enter()
    .append(`clipPath`)
    .attr(`id`, d => `${uniqueSelector}-clip-range-${d.id}-${d.start}-${d.end}`)
    .append(`rect`)
    .attrs({
      class: d => `clip-range-${d.id}-${d.start}-${d.end}-rect`,
      x: d => Math.max(yAxisOffset, scaleLinear(d.start)) + halfPixel,
      y: height - xAxisOffset + halfPixel,
      width: d => {
        let barWidth = (d.end - Math.max(d.start, min)) * widthZoomRatio * scale
        return Math.max(0, barWidth - 1)
      },
      height: proteinHeight - halfPixel,
    })

  chart
    .append(`g`)
    .attrs({
      'clip-path': `url(#${uniqueSelector}-chart-clip)`,
    })
    .selectAll(`text`)
    .data(data.proteins)
    .enter()
    .append(`text`)
    .text(d => d.id.toUpperCase())
    .attrs({
      class: d => `protein-name-${d.id}-${d.start}-${d.end}`,
      'clip-path': d => `url(#${uniqueSelector}-clip-range-${d.id}-${d.start}-${d.end})`,
      x: d => {
        let barWidth = (d.end - Math.max(d.start, min)) * widthZoomRatio * scale
        let x = scaleLinear(d.start)
        return barWidth + yAxisOffset < yAxisOffset ? x : Math.max(yAxisOffset, x)
      },
      y: height - xAxisOffset + proteinHeight,
      fill: (d, i) => `hsl(${i * 100}, 80%, 30%)`,
      'font-size': `11px`,
      'pointer-events': `none`,
    })

  chart
    .append(`g`)
    .selectAll(`rect`)
    .data(data.proteins)
    .enter()
    .append(`rect`)
    .attrs({
      class: d => `domain-${d.id}`,
      x: d => (d.start * scale) + yAxisOffset,
      y: height - xAxisOffset + proteinHeight + 60,
      width: d => ((d.end - d.start) * scale),
      height: 10 - halfPixel,
      fill: (d, i) => `hsl(${i * 100}, 80%, 90%)`,
      'pointer-events': `none`,
    })
}

/*----------------------------------------------------------------------------*/

export default setupProteins
